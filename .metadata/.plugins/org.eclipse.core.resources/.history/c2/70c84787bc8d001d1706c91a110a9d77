package com.sumit.api.javablogapis.services.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.sumit.api.javablogapis.entities.Category;
import com.sumit.api.javablogapis.entities.User;
import com.sumit.api.javablogapis.exceptions.ResourceNotFoundException;
import com.sumit.api.javablogapis.payloads.CategoryDto;
import com.sumit.api.javablogapis.payloads.UserDto;
import com.sumit.api.javablogapis.repositories.CategoryRepo;
import com.sumit.api.javablogapis.services.CategoryService;


@Service
public class CategoryServiceImpl implements CategoryService {

	@Autowired
	private CategoryRepo categoryRepo;
	
	@Autowired
	private ModelMapper modelMapper;
	
	@Override
	public CategoryDto createCategory(CategoryDto categoryDto) {

		Category cat = this.modelMapper.map(categoryDto, Category.class);
		Category addedCat = this.categoryRepo.save(cat);
		return this.modelMapper.map(addedCat, CategoryDto.class);
	}
	
	@Override
	public CategoryDto updateCategory(CategoryDto categoryDto, Integer categoryId) {
		Category cat = this.categoryRepo.findById(categoryId).orElseThrow(()->
			new ResourceNotFoundException("category", "categoryid", categoryId));
			cat.setCategoryTitle(categoryDto.getCategoryTitle());
			cat.setCategoryDescription(categoryDto.getCategoryDescription());
			Category updatedCat =	this.categoryRepo.save(cat);
			return this.modelMapper.map(updatedCat, CategoryDto.class);
	}
	
	@Override
	public void deleteCategory(Integer categoryId) {
		Category cat = this.categoryRepo.findById(categoryId).orElseThrow(()->
		new ResourceNotFoundException("category", "categoryid", categoryId));
		this.categoryRepo.delete(cat);

	}
	
	@Override
	public CategoryDto getCategory(Integer categoryId) {
		Category cat = this.categoryRepo.findById(categoryId).orElseThrow(()->
		new ResourceNotFoundException("category", "categoryid", categoryId));
		return this.modelMapper.map(cat, CategoryDto.class);
	}
	
	@Override
	public List<CategoryDto> getCategories() {
		List<Category> categoriess = this.categoryRepo.findAll();
		List<CategoryDto> catDto = categoriess.stream().map(cat->this.modelMapper.map(cat, CategoryDto.class )).collect(Collectors.toList());
		return catDto;
		
	
	}

}
